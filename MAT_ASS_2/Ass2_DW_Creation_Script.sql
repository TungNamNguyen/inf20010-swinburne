SET SERVEROUTPUT ON
DROP TABLE A2ERROREVENT CASCADE CONSTRAINTS;
DROP TABLE DWPROD CASCADE CONSTRAINTS;
DROP TABLE DWCUST CASCADE CONSTRAINTS;
DROP TABLE DWSALE CASCADE CONSTRAINTS;
DROP TABLE GENDERSPELLING CASCADE CONSTRAINTS;
/
--Part 1
--Task 1.1
CREATE TABLE A2ERROREVENT (
    ERRORID INTEGER,
    SOURCE_ROWID ROWID,
    SOURCE_TABLE VARCHAR2(30),
    ERRORCODE INTEGER,
    FILTERID INTEGER,
    DATETIME DATE,
    ACTION VARCHAR2(6),
    CONSTRAINT ERROREVENTACTION
    CHECK (ACTION IN ('SKIP', 'MODIFY'))
);
DROP SEQUENCE A2ErrorEvent_seq;
CREATE SEQUENCE A2ErrorEvent_seq;

/
--Task 1.2
CREATE TABLE DWPROD (
    DWPRODID INTEGER PRIMARY KEY,
    DWSOURCETABLE VARCHAR2(30),
    DWSOURCEID INTEGER,
    PRODNAME VARCHAR2(100),
    PRODCATNAME VARCHAR2(100),
    PRODMANUNAME VARCHAR2(100),
    PRODSHIPNAME VARCHAR2(100)
);

DROP SEQUENCE DWPROD_seq;
CREATE SEQUENCE DWPROD_seq;
/

CREATE TABLE DWCUST (
    DWCUSTID INTEGER PRIMARY KEY,
    DWSOURCEIDBRIS INTEGER,
    DWSOURCEIDMELB INTEGER,
    FIRSTNAME VARCHAR2(50),
    SURNAME VARCHAR2(50),
    GENDER VARCHAR2(1),
    PHONE VARCHAR2(20),
    POSTCODE VARCHAR2(10),
    CITY VARCHAR2(100),
    STATE VARCHAR2(50),
    CUSTCATNAME VARCHAR2(100)
);
DROP SEQUENCE DWCUST_seq;
CREATE SEQUENCE DWCUST_seq;
/
CREATE TABLE DWSALE (
    DWSALEID INTEGER PRIMARY KEY,
    DWCUSTID INTEGER,
    DWPRODID INTEGER,
    DWSOURCEIDBRIS INTEGER,
    DWSOURCEIDMELB INTEGER,
    QTY INTEGER,
    SALE_DWDATEID INTEGER,
    SHIP_DWDATEID INTEGER,
    SALEPRICE NUMBER(10, 2),
    FOREIGN KEY (DWCUSTID) REFERENCES DWCUST (DWCUSTID),
    FOREIGN KEY (DWPRODID) REFERENCES DWPROD (DWPRODID)
);
DROP SEQUENCE DWSALE_seq;
CREATE SEQUENCE DWSALE_seq;
/


CREATE TABLE GENDERSPELLING (
    INVALID_VALUE VARCHAR2(20),
    NEW_VALUE CHAR(1)
);

INSERT INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('MAIL', 'M');
INSERT INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('WOMAN', 'F');
INSERT INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('FEM', 'F');
INSERT INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('FEMALE', 'F');
INSERT INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('MALE', 'M');
INSERT INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('GENTLEMAN', 'M');
INSERT INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('MM', 'M');
INSERT INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('FF', 'F');
INSERT INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('FEMAIL', 'F');

/

--TAsk 2.1
INSERT INTO A2ERROREVENT (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, ROWID, 'A2PRODUCT', 116, 1, SYSDATE, 'SKIP'
FROM A2PRODUCT 
WHERE PRODNAME IS NULL;

/
--Task 2.2
INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, ROWID, 'A2PRODUCT', 129, 2, SYSDATE, 'MODIFY'
FROM A2PRODUCT
WHERE MANUFACTURERCODE IS NULL;

/
--Task 2.3

INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, ROWID, 'A2PRODUCT', 141, 3, SYSDATE, 'MODIFY'
FROM A2PRODUCT
WHERE PRODCATEGORY IS NULL OR PRODCATEGORY NOT IN (SELECT PRODUCTCATEGORY  FROM A2PRODCATEGORY);

/

--Task 2.4.3

INSERT INTO DWPROD (DWPRODID, DWSOURCETABLE, DWSOURCEID, PRODNAME, PRODCATNAME, PRODMANUNAME, PRODSHIPNAME)
SELECT DWPROD_seq.NEXTVAL, 'A2PRODUCT', P.PRODID, P.PRODNAME, PC.CATEGORYNAME, M.MANUNAME, S.DESCRIPTION 
FROM A2PRODUCT P
JOIN A2PRODCATEGORY PC ON P.PRODCATEGORY = PC.PRODUCTCATEGORY 
JOIN A2MANUFACTURER M ON P.MANUFACTURERCODE = M.MANUCODE
JOIN A2SHIPPING S ON S.SHIPPINGCODE = P.SHIPPINGCODE 
WHERE P.ROWID NOT IN (SELECT SOURCE_ROWID FROM A2ERROREVENT);

/

--Task 2.4.4

INSERT INTO DWPROD (DWPRODID, DWSOURCETABLE, DWSOURCEID, PRODNAME, PRODCATNAME, PRODMANUNAME, PRODSHIPNAME)
SELECT DWPROD_seq.NEXTVAL, 'A2PRODUCT', P.PRODID, P.PRODNAME, PC.CATEGORYNAME, 'UNKNOWN', S.DESCRIPTION
FROM A2PRODUCT P
JOIN A2PRODCATEGORY PC ON P.PRODCATEGORY = PC.PRODUCTCATEGORY 
JOIN A2SHIPPING S ON S.SHIPPINGCODE = P.SHIPPINGCODE
WHERE P.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE FILTERID = 2);

/
--Task 2.4.5
INSERT INTO DWPROD (DWPRODID, DWSOURCETABLE, DWSOURCEID, PRODNAME, PRODCATNAME, PRODMANUNAME, PRODSHIPNAME)
SELECT DWPROD_seq.NEXTVAL, 'A2PRODUCT', P.PRODID, P.PRODNAME, 'UNKNOWN', M.MANUNAME, S.DESCRIPTION
FROM A2PRODUCT P
JOIN A2MANUFACTURER M ON P.MANUFACTURERCODE = M.MANUCODE
JOIN A2SHIPPING S ON S.SHIPPINGCODE = P.SHIPPINGCODE
WHERE P.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE FILTERID = 3);

/
--Part 3:
--Task 3.1
INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, ROWID, 'A2CUSTBRIS', 168, 4, SYSDATE, 'MODIFY'
FROM A2CUSTBRIS
WHERE CUSTCATCODE NOT IN (SELECT CUSTCATCODE FROM A2CUSTCATEGORY) OR CUSTCATCODE IS NULL;

/
--Task 3.2

INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, ROWID, 'A2CUSTBRIS', 196, 5, SYSDATE, 'MODIFY'
FROM A2CUSTBRIS
WHERE PHONE LIKE '% %' OR PHONE LIKE '%-%';

/
--Task 3.3

INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, ROWID, 'A2CUSTBRIS', 204, 6, SYSDATE, 'SKIP'
FROM A2CUSTBRIS
WHERE LENGTH(PHONE) != 10 AND NOT(PHONE LIKE '%-%' OR PHONE LIKE '% %');

/
-- Task 3.4

INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, ROWID, 'A2CUSTBRIS', 231, 7, SYSDATE, 'MODIFY'
FROM A2CUSTBRIS
WHERE UPPER(GENDER) NOT IN ('M', 'F')OR GENDER IS NULL;

/
--Task 3.5.1

INSERT INTO DWCUST (DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT DWCUST_seq.NEXTVAL, C.CUSTID, C.FNAME, C.SNAME, UPPER(C.GENDER), C.PHONE, C.POSTCODE, C.CITY, C.STATE, CC.CUSTCATNAME
FROM A2CUSTBRIS C
JOIN A2CUSTCATEGORY CC ON C.CUSTCATCODE = CC.CUSTCATCODE
WHERE C.ROWID NOT IN (SELECT SOURCE_ROWID FROM A2ERROREVENT);

/

--Task 3.5.2
INSERT INTO DWCUST (DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT DWCUST_seq.NEXTVAL, C.CUSTID, C.FNAME, C.SNAME, UPPER(C.GENDER), C.PHONE, C.POSTCODE, C.CITY, C.STATE, 'UNKNOWN'
FROM A2CUSTBRIS C
WHERE C.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE FILTERID = 4);

/
--Task 3.5.3

INSERT INTO DWCUST (DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT DWCUST_seq.NEXTVAL, C.CUSTID, C.FNAME, C.SNAME, UPPER(C.GENDER),REPLACE(REPLACE(C.PHONE, ' ', ''), '-', ''), C.POSTCODE, C.CITY, C.STATE, CC.CUSTCATNAME
FROM A2CUSTBRIS C
JOIN A2CUSTCATEGORY CC ON C.CUSTCATCODE = CC.CUSTCATCODE
WHERE C.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE FILTERID = 5);

/
--Task 3.5.4

INSERT INTO DWCUST (DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT DWCUST_seq.NEXTVAL, C.CUSTID, C.FNAME, C.SNAME, UPPER(CASE WHEN GS.NEW_VALUE IS NOT NULL THEN GS.NEW_VALUE ELSE 'U' END),C.PHONE, C.POSTCODE, C.CITY, C.STATE, CC.CUSTCATNAME
FROM A2CUSTBRIS C
LEFT JOIN GENDERSPELLING GS ON UPPER(C.GENDER) = UPPER(GS.INVALID_VALUE)  
JOIN A2CUSTCATEGORY CC ON C.CUSTCATCODE = CC.CUSTCATCODE
WHERE C.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE FILTERID = 7);

/

-- Part 4:
--Task 4.1
MERGE INTO DWCUST D
USING A2CUSTMELB C
ON (D.FIRSTNAME = C.FNAME AND D.SURNAME = C.SNAME AND D.POSTCODE = C.POSTCODE)
WHEN MATCHED THEN
    UPDATE SET D.DWSOURCEIDMELB = C.CUSTID
WHEN NOT MATCHED THEN
    INSERT (DWCUSTID, DWSOURCEIDMELB, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
    VALUES (DWCUST_seq.NEXTVAL, C.CUSTID, C.FNAME, C.SNAME, UPPER(C.GENDER), C.PHONE, C.POSTCODE, C.CITY, C.STATE, (SELECT CUSTCATNAME FROM A2CUSTCATEGORY CC WHERE CC.CUSTCATCODE = C.CUSTCATCODE));

/
-- Part 5:
--Task 5.1:

INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, S.ROWID, 'A2SALEBRIS', 247, 8, SYSDATE, 'SKIP'
FROM A2SALEBRIS S
WHERE S.PRODID NOT IN (SELECT DWSOURCEID FROM DWPROD) OR S.PRODID IS NULL;

/
--Task 5.2
--INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
--SELECT A2ErrorEvent_seq.NEXTVAL, S.ROWID, 'A2SALEBRIS', 272, 9, SYSDATE, 'SKIP'
--FROM A2SALEBRIS S
--WHERE S.CUSTID NOT IN (SELECT DWSOURCEIDBRIS FROM DWCUST) OR S.CUSTID IS NULL;

INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, S.ROWID, 'A2SALEBRIS', 272, 9, SYSDATE, 'SKIP'
FROM A2SALEBRIS S
LEFT JOIN DWCUST C ON S.CUSTID = C.DWSOURCEIDBRIS
WHERE C.DWSOURCEIDBRIS IS NULL OR S.CUSTID IS NULL OR S.CUSTID NOT IN (SELECT DWSOURCEIDBRIS FROM DWCUST);

/
--Task 5.3

INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, S.ROWID, 'A2SALEBRIS', 294, 10, SYSDATE, 'MODIFY'
FROM A2SALEBRIS S
WHERE S.SHIPDATE < S.SALEDATE;

/
--Task 5.4:

INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, S.ROWID, 'A2SALEBRIS', 317, 11, SYSDATE, 'MODIFY'
FROM A2SALEBRIS S
WHERE S.UNITPRICE IS NULL;

/
--Task 5.5:

INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDBRIS, QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT DWSALE_seq.NEXTVAL,cust.DWCUSTID,prod.DWPRODID,sale.SALEID,sale.QTY,saledate.DATEKEY,shipdate.DATEKEY, sale.UNITPRICE  
FROM A2SALEBRIS sale,DWCUST cust,DWPROD prod,DWDATE saledate,DWDATE shipdate
WHERE sale.CUSTID = cust.DWSOURCEIDBRIS                 
    AND sale.PRODID = prod.DWSOURCEID                       
    AND saledate.DATEVALUE = sale.SALEDATE                       
    AND shipdate.DATEVALUE = sale.SHIPDATE                      
    AND sale.ROWID NOT IN (SELECT SOURCE_ROWID FROM A2ERROREVENT);  

/
--Task 5.6


INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDBRIS, QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT DWSALE_seq.NEXTVAL, cust.DWCUSTID, prod.DWPRODID, sale.SALEID, sale.QTY, sale_date.DATEKEY, ship_date.DATEKEY, sale.UNITPRICE    
FROM A2SALEBRIS sale, DWCUST cust, DWPROD prod, DWDATE sale_date, DWDATE ship_date
WHERE sale.CUSTID = cust.DWSOURCEIDBRIS              
    AND sale.PRODID = prod.DWSOURCEID                   
    AND sale_date.DATEVALUE = sale.SALEDATE                  
    AND ship_date.DATEVALUE = sale.SALEDATE + 2               
    AND sale.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE FILTERID = 10);             
        
/
--Task 5,7

INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDBRIS, QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT DWSALE_seq.NEXTVAL, cust.DWCUSTID, prod.DWPRODID,sale.SALEID, sale.QTY, sale_date.DATEKEY, ship_date.DATEKEY,(SELECT MAX(S.UNITPRICE) FROM A2SALEBRIS S WHERE S.PRODID = sale.PRODID)  
FROM A2SALEBRIS sale,DWCUST cust,DWPROD prod,DWDATE sale_date,DWDATE ship_date
WHERE sale.CUSTID = cust.DWSOURCEIDBRIS                
    AND sale.PRODID = prod.DWSOURCEID                    
    AND sale_date.DATEVALUE = sale.SALEDATE                   
    AND ship_date.DATEVALUE = sale.SHIPDATE                  
    AND sale.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE FILTERID = 11);             

/
--Part 6:
--Task 6.1:

INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, S.ROWID, 'A2SALEMELB', 325, 12, SYSDATE, 'SKIP'
FROM A2SALEMELB S
WHERE S.PRODID NOT IN (SELECT DWSOURCEID FROM DWPROD) OR S.PRODID IS NULL;

/
--Task 6.2

INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, S.ROWID, 'A2SALEMELB', 346, 13, SYSDATE, 'SKIP'
FROM A2SALEMELB S
LEFT JOIN DWCUST C ON S.CUSTID = C.DWSOURCEIDMELB
WHERE S.CUSTID NOT IN (SELECT DWSOURCEIDMELB FROM DWCUST) OR S.CUSTID IS NULL OR C.DWSOURCEIDMELB IS NULL;

/
--Task 6.3

INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, S.ROWID, 'A2SALEMELB', 379, 14, SYSDATE, 'MODIFY'
FROM A2SALEMELB S
WHERE S.SHIPDATE < S.SALEDATE;

/
--Task 6.4

INSERT INTO A2ErrorEvent (ERRORID, SOURCE_ROWID, SOURCE_TABLE, ERRORCODE, FILTERID, DATETIME, ACTION)
SELECT A2ErrorEvent_seq.NEXTVAL, S.ROWID, 'A2SALEMELB', 391, 15, SYSDATE, 'MODIFY'
FROM A2SALEMELB S
WHERE S.UNITPRICE IS NULL;

/
--Task 6.5:
INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDMELB, QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT DWSALE_seq.NEXTVAL,cust.DWCUSTID, prod.DWPRODID, sale.SALEID, sale.QTY, saledate.DATEKEY, shipdate.DATEKEY,sale.UNITPRICE  
FROM A2SALEMELB sale, DWCUST cust,DWPROD prod,DWDATE saledate,DWDATE shipdate
WHERE sale.CUSTID = cust.DWSOURCEIDMELB                
    AND sale.PRODID = prod.DWSOURCEID                       
    AND saledate.DATEVALUE = sale.SALEDATE                       
    AND shipdate.DATEVALUE = sale.SHIPDATE                      
    AND sale.ROWID NOT IN (SELECT SOURCE_ROWID FROM A2ERROREVENT)
    AND sale.ROWID NOT IN ( SELECT SOURCE_ROWID FROM A2ERROREVENT GROUP BY SOURCE_ROWID HAVING COUNT(FILTERID) > 1); 

/
--Task 6.6
INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDMELB, QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT DWSALE_seq.NEXTVAL, cust.DWCUSTID, prod.DWPRODID, sale.SALEID, sale.QTY, saledate.DATEKEY, shipdate.DATEKEY, sale.UNITPRICE  
FROM A2SALEMELB sale, DWCUST cust, DWPROD prod,DWDATE saledate,DWDATE shipdate
WHERE sale.CUSTID = cust.DWSOURCEIDMELB                
    AND sale.PRODID = prod.DWSOURCEID                      
    AND saledate.DATEVALUE = sale.SALEDATE                      
    AND shipdate.DATEVALUE = sale.SALEDATE + 2                  
    AND sale.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE FILTERID = 14)
    AND sale.ROWID NOT IN (SELECT SOURCE_ROWID FROM A2ERROREVENT GROUP BY SOURCE_ROWID HAVING COUNT(FILTERID) > 1); 
/
--Task 6.7

INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDMELB, QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT DWSALE_seq.NEXTVAL,cust.DWCUSTID,prod.DWPRODID,sale.SALEID,sale.QTY,saledate.DATEKEY,shipdate.DATEKEY,(SELECT MAX(UNITPRICE) FROM A2SALEMELB WHERE PRODID = sale.PRODID)
FROM A2SALEMELB sale,DWCUST cust,DWPROD prod,DWDATE saledate,DWDATE shipdate
WHERE sale.CUSTID = cust.DWSOURCEIDMELB            
    AND sale.PRODID = prod.DWSOURCEID                   
    AND saledate.DATEVALUE = sale.SALEDATE                  
    AND shipdate.DATEVALUE = sale.SHIPDATE                   
    AND sale.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE FILTERID = 15)
    AND sale.ROWID NOT IN (SELECT SOURCE_ROWID FROM A2ERROREVENT GROUP BY SOURCE_ROWID HAVING COUNT(FILTERID) > 1); 
/ 






